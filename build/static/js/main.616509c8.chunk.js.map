{"version":3,"sources":["assets/img/logo/react_logo.svg","serviceWorker.js","js/App.js","js/Users.js","js/Contact.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","App","react_default","a","createElement","className","src","logo","alt","href","target","rel","Users","React","Component","Contact","routing","react_router_dom","to","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gNCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4FCmBSC,MArBf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,eACzCN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,8BADP,wBAGAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWI,KAAK,sBAAsBC,OAAO,SAASC,IAAI,uBAAvE,yDClBOC,mLAHX,OAAOV,EAAAC,EAAAC,cAAA,0BAFSS,IAAMC,WCKXC,mLAHX,OAAOb,EAAAC,EAAAC,cAAA,4BAFWS,IAAMC,WCQtBE,EACJd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAG,KAAT,QADF,KAEEhB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAG,UAAT,SAFF,KAGEhB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAG,YAAT,WACAhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjCC,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,gBAAgBC,UAAWV,IACvCV,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWP,KAKtCQ,IAASC,OAAOR,EAASS,SAASC,eAAe,SJ4G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.616509c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react_logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport logo from '../assets/img/logo/react_logo.svg';\nimport './App.css';\nimport { Route } from 'react-router-dom'\n\nconst Button = () => (\n  <Route render={({ history }) => (\n    <button\n      type='button'\n      onClick={() => { history.push('/new-location') }}\n    >\n      Click Me!\n    </button>\n  )} />\n)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"react-logo\" />\n        <p>\n          Edit <code>/src/js/App.js</code> and save to reload.\n        </p>\n        <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\" >\n          Learn React\n        </a>\n        {/* <BrowserRouter>\n          <div>\n          <Route path=\"/new-location\" component={\"newlocation\"} />Hi\n          </div>\n        </BrowserRouter> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\nclass Users extends React.Component {\n  render() {\n    return <h1>Users</h1>\n  }\n}\nexport default Users;","import React from 'react'\nclass Contact extends React.Component {\n  render() {\n    return <h1>Contact</h1>\n  }\n}\nexport default Contact;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, Link, BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport App from \"./js/App\";\nimport Users from \"./js/Users\";\nimport Contact from \"./js/Contact\";\n\nconst routing = (\n  <Router>\n    <Link to=\"/\">Home</Link> | \n    <Link to=\"/users\">Users</Link> | \n    <Link to=\"/contact\">Contact</Link>\n    <Route exact path=\"/\" component={App} />\n    <Route path=\"/userseiofwef\" component={Users} />\n    <Route path=\"/contact\" component={Contact} />\n  </Router>\n);\n\n// entry point for react rendering\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// default\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}